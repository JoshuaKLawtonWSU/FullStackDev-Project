// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User-related models
model User {
  id              String    @id @default(cuid())
  email           String    @unique
  password        String
  firstName       String?
  lastName        String?
  phone           String?
  isAdmin         Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  addresses       Address[]
  orders          Order[]
  cartItems       CartItem[]
  reviews         Review[]
  wishlistItems   WishlistItem[]
}

model Address {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  street          String
  city            String
  state           String
  postalCode      String
  country         String
  isDefault       Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  orders          Order[]
}

// Product-related models
model Category {
  id              String    @id @default(cuid())
  name            String
  slug            String    @unique
  description     String?
  parentId        String?
  parent          Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children        Category[] @relation("CategoryHierarchy")
  products        Product[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Product {
  id              String    @id @default(cuid())
  name            String
  slug            String    @unique
  description     String
  price           Decimal   @db.Decimal(10, 2)
  compareAtPrice  Decimal?  @db.Decimal(10, 2)
  sku             String?
  inventory       Int       @default(0)
  isActive        Boolean   @default(true)
  categoryId      String
  category        Category  @relation(fields: [categoryId], references: [id])
  images          ProductImage[]
  variants        ProductVariant[]
  attributes      ProductAttribute[]
  orderItems      OrderItem[]
  cartItems       CartItem[]
  reviews         Review[]
  wishlistItems   WishlistItem[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model ProductImage {
  id              String    @id @default(cuid())
  productId       String
  product         Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  url             String
  alt             String?
  position        Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model ProductVariant {
  id              String    @id @default(cuid())
  productId       String
  product         Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  name            String
  sku             String?
  price           Decimal   @db.Decimal(10, 2)
  inventory       Int       @default(0)
  options         ProductVariantOption[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model ProductVariantOption {
  id              String    @id @default(cuid())
  variantId       String
  variant         ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  name            String
  value           String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model ProductAttribute {
  id              String    @id @default(cuid())
  productId       String
  product         Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  name            String
  value           String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

// Shopping-related models
model CartItem {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId       String
  product         Product   @relation(fields: [productId], references: [id])
  quantity        Int
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model WishlistItem {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId       String
  product         Product   @relation(fields: [productId], references: [id])
  createdAt       DateTime  @default(now())
}

// Order-related models
model Order {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  addressId       String
  address         Address   @relation(fields: [addressId], references: [id])
  status          OrderStatus @default(PENDING)
  totalAmount     Decimal   @db.Decimal(10, 2)
  tax             Decimal   @db.Decimal(10, 2)
  shippingCost    Decimal   @db.Decimal(10, 2)
  discount        Decimal?  @db.Decimal(10, 2)
  paymentId       String?
  orderItems      OrderItem[]
  paymentMethod   PaymentMethod?
  transactions    Transaction[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model OrderItem {
  id              String    @id @default(cuid())
  orderId         String
  order           Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId       String
  product         Product   @relation(fields: [productId], references: [id])
  quantity        Int
  price           Decimal   @db.Decimal(10, 2)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model PaymentMethod {
  id              String    @id @default(cuid())
  orderId         String    @unique
  order           Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  type            PaymentType
  details         String?   // Encrypted or tokenized payment details
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Transaction {
  id              String    @id @default(cuid())
  orderId         String
  order           Order     @relation(fields: [orderId], references: [id])
  amount          Decimal   @db.Decimal(10, 2)
  status          TransactionStatus
  paymentGateway  String
  transactionId   String
  createdAt       DateTime  @default(now())
}

// Review-related models
model Review {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  productId       String
  product         Product   @relation(fields: [productId], references: [id])
  rating          Int
  comment         String?
  isVerified      Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

// Enums
enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentType {
  CREDIT_CARD
  PAYPAL
  BANK_TRANSFER
  CASH_ON_DELIVERY
}

enum TransactionStatus {
  PENDING
  SUCCESSFUL
  FAILED
  REFUNDED
}